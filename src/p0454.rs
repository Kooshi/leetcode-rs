

#[cfg(test)]
mod tests {
    use super::Solution;
    #[test]
    fn it_works() {
        assert_eq!(
            Solution::four_sum_count(
                vec![-82,321,390,-24,-113,-10,342,-241,400,-46,-208,-396,-242,269,-330,-413,120,-27,-108,438,-295,-26,141,-471,-452,-436,  8,285,-312,-160,396,-89,-152,466,-149,228,125,131,-314, 18,-420,-248,112,-341,350,-346,301,421, 26,420,-259,-404,-478,-75,172,-126, -9,-397,-435,-98,-271,467,479,-92,-239,297,406,-195,184,-258,-277,  6,198,-467,109,  1,304,447,-257,-100,-120,-302, 29,-437,-32,-166, 56,-337,-220,-366,-128,-187,186, -2,175,-409,-78,-426,-188,-104],
                vec![-383,114,-275,-462,456,205,-122,445,163,-212, 73,491,-461, 11,-431,355, 34,-25,334,-181,-447,357,305,-325,-381,-372,-28,444,-476, 40,399,-163,377,194, 55,490,339,500,272,249,-201,182,-326,-493,-210,233,-84,-345, 38,-477, 59,-465, 41, -3,-333,197,216,307,-144,154, 37,-386,-200,-44,419,-156,-137,-311,-321,-247,162,153,-23,347,-145,-130,107,276,440, 13, 98, 39,-364,402,-278,-387,-362,-373,164,-231,-165, 27,-423,222,-21,340,437, 76,-246,-213],
                vec![278,-421,-310,-49,230,-351,-324, 57,113,331,-443,-99, 63,-174,-228,207,-226,-235,-418,-393,209,-105,-47,-412, 46, 13,-440,-289,285,356,-259,326,138,200,129, 83,-349,-456,-276, 98, 69,-225,465,-452,492,-332, 35,199,-267, 27,434,-246,-405,-201,-494,-375,-222, 36,302,-224,-500,161,-154,-498,103,-120,344,-80,-98,366,170,-152,-370, 37,-330,468,381,-397,-475, 25,-168,-30,405,-88,105,253,-383,-362, 33,-325,148,-177,-329,-262,245,276,-218,-458,347,-202],
                vec![-263,-344,-70,270, -1,-426,-484,-493,445,-229, 56,-490,-167,223,-492,-318,-178,-160,469,432,280,350,179,450,-146,271,-420,-176,494,307,416,-497,328,  1,135,-478,-183,-371,-71,-103,128,-181,-244,375,482,130,-377,342,385,439,480,-214, 66,-53,-367,-75,345,-406,211,351,-135,493,-357,478,  6,183,-247,471,-196,-467,-399,224,188,277,-364,359,231,229,109,315,163,-185,267,-237,-369, 87,108,325,256,-29,-156,-22,435,119, -2,-345,-300,-27,-391,-401],
            )
            ,65099)
    }

    // use test::Bencher;
    // #[bench]
    // fn bench(b: &mut Bencher) {
    //     b.iter(|| )
    // }
}

//got like halfway there myself... I am dumb
struct Solution;
use std::collections::HashMap;
impl Solution {
    pub fn four_sum_count(a: Vec<i32>, b: Vec<i32>, c: Vec<i32>, d: Vec<i32>) -> i32 {
        let mut h = HashMap::with_capacity(a.len() * b.len());
        for x in a.iter() {
            for y in b.iter() {
                h.entry(x + y).and_modify(|v| { *v += 1 }).or_insert(1);
            }
        }
        let mut val = 0;
        for x in c.iter() {
            for y in d.iter() {
                val += *h.entry(-(x + y)).or_default();
            }
        }
        val
    }
}